package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/Sotnasjeff/movie-category-manager-graphql/graph/model"
)

// Movies is the resolver for the movies field.
func (r *categoryResolver) Movies(ctx context.Context, obj *model.Category) ([]*model.Movies, error) {
	movies, err := r.MovieDB.FindByCategoryID(obj.ID)
	if err != nil {
		return nil, err
	}
	var movieModel []*model.Movies
	for _, movie := range movies {
		movieModel = append(movieModel, &model.Movies{
			ID:          movie.ID,
			Name:        movie.Description,
			Description: &movie.Description,
		})
	}
	return movieModel, nil
}

// Category is the resolver for the category field.
func (r *moviesResolver) Category(ctx context.Context, obj *model.Movies) (*model.Category, error) {
	category, err := r.CategoryDB.FindByMovieId(obj.ID)
	if err != nil {
		return nil, err
	}

	return &model.Category{
		ID:          category.ID,
		Name:        category.Name,
		Description: &category.Description,
	}, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	category, err := r.CategoryDB.CreateCategory(input.Name, *input.Description)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          category.ID,
		Name:        category.Name,
		Description: &category.Description,
	}, nil
}

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movies, error) {
	movie, err := r.MovieDB.CreateMovie(input.Name, *input.Description, input.CategoryID)
	if err != nil {
		return nil, err
	}
	return &model.Movies{
		ID:          movie.ID,
		Name:        movie.Name,
		Description: &movie.Description,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDB.FindAll()
	if err != nil {
		return nil, err
	}

	var categoriesModel []*model.Category

	for _, category := range categories {
		categoriesModel = append(categoriesModel, &model.Category{
			ID:          category.ID,
			Name:        category.Name,
			Description: &category.Description,
		})
	}

	return categoriesModel, nil
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movies, error) {
	movies, err := r.MovieDB.FindAllMovies()
	if err != nil {
		return nil, err
	}

	var moviesModel []*model.Movies

	for _, movie := range movies {
		moviesModel = append(moviesModel, &model.Movies{
			ID:          movie.ID,
			Name:        movie.Name,
			Description: &movie.Description,
		})
	}

	return moviesModel, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Movies returns MoviesResolver implementation.
func (r *Resolver) Movies() MoviesResolver { return &moviesResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type moviesResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
